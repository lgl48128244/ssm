<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                     http://www.springframework.org/schema/beans/spring-beans.xsd  
                     http://www.springframework.org/schema/tx  
                     http://www.springframework.org/schema/tx/spring-tx.xsd  
                     http://www.springframework.org/schema/context   
                     http://www.springframework.org/schema/context/spring-context.xsd  
                     http://www.springframework.org/schema/aop  
                     http://www.springframework.org/schema/aop/spring-aop.xsd  
                     http://www.springframework.org/schema/jdbc  
                     http://www.springframework.org/schema/jdbc/spring-jdbc.xsd  
                     http://www.springframework.org/schema/util        
                     http://www.springframework.org/schema/util/spring-util.xsd  
                     http://www.springframework.org/schema/mvc   
                     http://www.springframework.org/schema/mvc/spring-mvc.xsd">


	<!-- 自动扫描(自动注入) -->
	<context:component-scan base-package="com.ssm.project.controller" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
	<bean class="com.ssm.project.util.SpringContextHolder" lazy-init="false" />

	<!-- 视图解析器 -->
	<!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" /> <property name="contentType" value="text/html" /> <property name="prefix" value="/WEB-INF/jsp/" /> <property name="suffix" value=".jsp" /> </bean> -->
	<!--对模型视图名称的解析，即在模型视图名称添加前后缀 -->

	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/" p:suffix=".jsp">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
	</bean>

	<!-- 自定义 -->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters>
			<ref bean="stringHttpMessageConverter" />
			<ref bean="marshallingHttpMessageConverter" />
			<ref bean="byteArrayHttpMessageConverter" />
			<ref bean="resourceHttpMessageConverter" />
			<ref bean="sourceHttpMessageConverter" />
			<ref bean="xmlAwareFormHttpMessageConverter" />
			<ref bean="jaxb2RootElementHttpMessageConverter" />
			<ref bean="mappingJacksonHttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 如果当前请求为“/”时，则转发到“/user/login" -->
	<!-- <mvc:view-controller path="/" view-name="forward:/user/loginPage" /> -->
	<!-- 配置js，css等静态文件直接映射到对应的文件夹，不被DispatcherServlet处理 -->
	<!-- <mvc:resources location="/**" mapping="/**/*.html" order="0" /> -->
	<!-- <mvc:resources location="/Images/**" mapping="/Images/**" /> -->
	<mvc:resources location="/download/**" mapping="/download/**" />
	<mvc:resources location="/uikit-2.11.0/**" mapping="/uikit-2.11.0/**" />
	<mvc:resources location="/js/**" mapping="/js/**" />
	<mvc:resources location="/css/**" mapping="/css/**" />
	<mvc:resources location="/jsp/**" mapping="/jsp/**" />

	<!-- 走servlet的默认配置，先走默认的web.xml配置的servlet，没有的话才找对应controller -->
	<mvc:default-servlet-handler />

	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
		<constructor-arg value="UTF-8" index="0" />
		<!-- 避免出现乱码 -->
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<bean id="marshallingHttpMessageConverter" class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
		<property name="marshaller" ref="castorMarshaller" />
		<property name="unmarshaller" ref="castorMarshaller" />
		<property name="supportedMediaTypes">
			<list>
				<value>text/xml;charset=UTF-8</value>
				<value>application/xml;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<bean id="byteArrayHttpMessageConverter" class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
	<bean id="resourceHttpMessageConverter" class="org.springframework.http.converter.ResourceHttpMessageConverter" />
	<bean id="sourceHttpMessageConverter" class="org.springframework.http.converter.xml.SourceHttpMessageConverter" />
	<bean id="xmlAwareFormHttpMessageConverter" class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter" />
	<bean id="jaxb2RootElementHttpMessageConverter" class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" />
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />

	<!-- Simple strategy: json is preferred. -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="defaultContentType" value="application/json" />
		<property name="favorPathExtension" value="true" />
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="text/xml" />
			</map>
		</property>
	</bean>


	<!-- 返回类型定义 -->
	<util:list id="messageConverters">
		<ref bean="stringHttpMessageConverter" />
		<ref bean="marshallingHttpMessageConverter" />
		<ref bean="byteArrayHttpMessageConverter" />
		<ref bean="resourceHttpMessageConverter" />
		<ref bean="sourceHttpMessageConverter" />
		<ref bean="xmlAwareFormHttpMessageConverter" />
		<ref bean="jaxb2RootElementHttpMessageConverter" />
		<ref bean="mappingJacksonHttpMessageConverter" />
	</util:list>

	<bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller" />

	<!-- 这里拦截器还有一种配置方法【针对路径进行配置】 推荐使用这个，方便直观 -->
	<mvc:interceptors>
		<!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 -->
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
		<!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求 -->
	</mvc:interceptors>

	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="messages"></property>
	</bean>

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />

	<!-- 处理文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" /> <!-- 默认编码 (ISO-8859-1) -->
		<property name="maxInMemorySize" value="10240" /> <!-- 最大内存大小 (10240) -->
		<property name="uploadTempDir" value="/download/" /> <!-- 上传后的目录名 (WebUtils#TEMP_DIR_CONTEXT_ATTRIBUTE) -->
		<property name="maxUploadSize" value="-1" /> <!-- 最大文件大小，-1为无限止(-1) -->
	</bean>

	<!-- restTemplate -->
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<property name="messageConverters" ref="messageConverters" />
	</bean>

	<!-- 总错误处理 -->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 上传文件大于最大尺寸后转向出错页面 -->
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">
					redirect:/uploadError.jsp
				</prop>
			</props>
		</property>
		<property name="defaultErrorView" value="forward:/error.jsp" />
		<property name="defaultStatusCode" value="200" />
		<property name="warnLogCategory" value="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" />
	</bean>
</beans>
