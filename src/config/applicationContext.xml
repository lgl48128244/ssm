<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context.xsd 
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 自动扫描(自动注入) -->
	<context:component-scan base-package="com.ssm.project.service" />
	<!-- 加载properties方式的DBCP -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- <bean id="mappings" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
	<!-- <property name="locations" value="classpath:jdbc.properties"></property> -->
	<!-- </bean> -->
	<!-- 数据源 -->
	<!-- JNDI -->
	<!-- <bean id="JNDIdataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> <property name="jndiName" value="java:comp/env/jdbc/OracleDataSource"/> </bean> -->
	<!-- DBCP -->
	<bean id="DBCPdataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	<!-- c3p0 -->
	<!-- <bean id="C3P0dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean> -->
	<!-- proxool -->
	<!-- <bean id="proxoolDataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="driver" value="${jdbc.driverClassName}" />
		<property name="driverUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean> -->

	<!-- sessionFactory 将spring和mybatis整合 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="DBCPdataSource" />
		<property name="mapperLocations" value="classpath*:mapper/*.xml" />
		<property name="configLocation" value="classpath:./config/mybatis.xml" />
	</bean>
	<!-- 相当于实现类的@Repository,因为接口不能用@Repository. -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ssm.project.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="DBCPdataSource" />
	</bean>
	<!-- 为service添加事务处理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="init*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="search*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 需要引入aop的命名空间（配置事物的切入点） -->
	<aop:config>
		<!-- 切入点指明了在执行Service的所有方法时产生事务拦截操作 -->
		<aop:pointcut expression="execution(public * com.ssm.project.service.*.*(..))" id="txPointCut" />
		<!-- 定义了将采用何种拦截操作，这里引用到 txAdvice -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut" />
	</aop:config>
</beans>